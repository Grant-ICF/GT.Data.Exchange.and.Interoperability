"""
Generated Mock Effect Handlers for Testing

Auto-generated from YAML-LD specification.
DO NOT EDIT - This file is generated by hmis-codegen.

These mock handlers simulate effect execution without actual side effects.
Use them in unit tests to verify effect composition and handler calls.
"""

from typing import Any, Dict, List, Optional
from dataclasses import dataclass, field
from datetime import datetime


# ============================================================================
# Mock Handler Base Class
# ============================================================================

@dataclass
class MockEffectCall:
    """Records a single effect handler invocation"""
    effect_type: str
    timestamp: datetime
    args: Dict[str, Any]
    result: Any
    
    def __repr__(self) -> str:
        return f"MockEffectCall({self.effect_type}, args={self.args})"


@dataclass
class MockHandler:
    """Base class for all mock effect handlers"""
    calls: List[MockEffectCall] = field(default_factory=list)
    default_result: Any = None
    should_raise: Optional[Exception] = None
    
    def record_call(self, effect_type: str, result: Any, **kwargs) -> None:
        """Record an effect handler call"""
        self.calls.append(MockEffectCall(
            effect_type=effect_type,
            timestamp=datetime.now(),
            args=kwargs,
            result=result
        ))
    
    def reset(self) -> None:
        """Clear call history"""
        self.calls.clear()
    
    def assert_called(self) -> None:
        """Assert handler was called at least once"""
        assert len(self.calls) > 0, f"Handler was never called"
    
    def assert_called_once(self) -> None:
        """Assert handler was called exactly once"""
        assert len(self.calls) == 1, f"Handler called {len(self.calls)} times, expected 1"
    
    def assert_called_with(self, **expected_args) -> None:
        """Assert handler was called with specific arguments"""
        for call in self.calls:
            if all(call.args.get(k) == v for k, v in expected_args.items()):
                return
        raise AssertionError(f"No call found with args: {expected_args}")


# ============================================================================
# Generated Mock Handlers
# ============================================================================

{% for handler in handlers %}
class Mock{{ handler.name }}(MockHandler):
    """
    Mock handler for {{ handler.effect_type }} effect
    
    {{ handler.docstring | indent(4) }}
    
    Example:
        # Setup mock
        mock = Mock{{ handler.name }}()
        mock.default_result = expected_value
        
        # Use in test
        result = mock.handle(...)
        
        # Verify calls
        mock.assert_called_once()
        mock.assert_called_with(param=value)
    """
    
    def handle(self, **kwargs) -> Any:
        """Execute mock {{ handler.effect_type }} effect"""
        if self.should_raise:
            raise self.should_raise
        
        result = self.default_result
        self.record_call('{{ handler.effect_type }}', result, **kwargs)
        return result

{% endfor %}

# ============================================================================
# Mock Handler Registry
# ============================================================================

class MockHandlerRegistry:
    """Registry of all mock effect handlers"""
    
    def __init__(self):
        self.handlers: Dict[str, MockHandler] = {
            {% for handler in handlers %}
            '{{ handler.effect_type }}': Mock{{ handler.name }}(),
            {% endfor %}
        }
    
    def get(self, effect_type: str) -> MockHandler:
        """Get mock handler for effect type"""
        if effect_type not in self.handlers:
            raise ValueError(f"Unknown effect type: {effect_type}")
        return self.handlers[effect_type]
    
    def reset_all(self) -> None:
        """Reset all mock handlers"""
        for handler in self.handlers.values():
            handler.reset()
    
    def get_all_calls(self) -> List[MockEffectCall]:
        """Get all calls across all handlers"""
        all_calls = []
        for handler in self.handlers.values():
            all_calls.extend(handler.calls)
        return sorted(all_calls, key=lambda c: c.timestamp)


# ============================================================================
# Test Utilities
# ============================================================================

def create_mock_handlers() -> MockHandlerRegistry:
    """
    Create a registry of mock handlers for testing
    
    Returns:
        MockHandlerRegistry with all effect handlers
    
    Example:
        handlers = create_mock_handlers()
        handlers.get('ConsentCheck').default_result = ConsentStatus.GRANTED
        handlers.get('DatabaseWrite').should_raise = DatabaseError("Connection failed")
        
        # Run test code...
        
        # Verify effects
        handlers.get('ConsentCheck').assert_called()
        handlers.get('DatabaseWrite').assert_called_with(entity='Client')
    """
    return MockHandlerRegistry()


def print_effect_trace(registry: MockHandlerRegistry) -> None:
    """Print chronological trace of all effect calls"""
    print("Effect Execution Trace:")
    print("=" * 80)
    for call in registry.get_all_calls():
        print(f"[{call.timestamp.isoformat()}] {call.effect_type}")
        print(f"  Args: {call.args}")
        print(f"  Result: {call.result}")
        print()
```