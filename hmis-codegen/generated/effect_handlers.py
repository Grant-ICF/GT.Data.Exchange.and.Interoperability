"""
Generated Mock Effect Handlers

Auto-generated from YAML-LD specification.
DO NOT EDIT - This file is generated by hmis-codegen.

These mock handlers can be used in unit tests to simulate effect execution
without requiring actual database connections, API calls, etc.
"""

from typing import Any, Dict, List
from dataclasses import dataclass, field


# ============= Mock Handler Base Class =============

@dataclass
class MockHandler:
    """Base class for mock effect handlers"""
    calls: List[Dict[str, Any]] = field(default_factory=list)
    
    def record_call(self, **kwargs):
        """Record a handler call for testing"""
        self.calls.append(kwargs)
    
    def reset(self):
        """Reset call history"""
        self.calls.clear()


# ============= Mock Effect Handlers =============

@dataclass
class MockAuthorizationCheckHandler(MockHandler):
    """
    Mock handler for AuthorizationCheck effect
    
    Usage:
        handler = MockAuthorizationCheckHandler()
        result = handler.handle(...)
        
        # Verify calls
        assert len(handler.calls) == 1
        assert handler.calls[0]['some_param'] == expected_value
    """
    # Default return value
    default_result: Any = None
    
    def handle(self, ) -> Any:
        """Execute mock AuthorizationCheck effect"""
        self.record_call(
        )
        return self.default_result

@dataclass
class MockDatabaseReadHandler(MockHandler):
    """
    Mock handler for DatabaseRead effect
    
    Usage:
        handler = MockDatabaseReadHandler()
        result = handler.handle(...)
        
        # Verify calls
        assert len(handler.calls) == 1
        assert handler.calls[0]['some_param'] == expected_value
    """
    # Default return value
    default_result: Any = None
    
    def handle(self, ) -> Any:
        """Execute mock DatabaseRead effect"""
        self.record_call(
        )
        return self.default_result

@dataclass
class MockAuditLogHandler(MockHandler):
    """
    Mock handler for AuditLog effect
    
    Usage:
        handler = MockAuditLogHandler()
        result = handler.handle(...)
        
        # Verify calls
        assert len(handler.calls) == 1
        assert handler.calls[0]['some_param'] == expected_value
    """
    # Default return value
    default_result: Any = None
    
    def handle(self, ) -> Any:
        """Execute mock AuditLog effect"""
        self.record_call(
        )
        return self.default_result


# ============= Mock Handler Factory =============

class MockHandlerFactory:
    """Factory for creating mock handlers"""
    
    @staticmethod
    def create_all() -> Dict[str, MockHandler]:
        """Create all mock handlers"""
        return {
            "AuthorizationCheck": MockAuthorizationCheckHandler(),
            "DatabaseRead": MockDatabaseReadHandler(),
            "AuditLog": MockAuditLogHandler(),
        }
    
    @staticmethod
    def create(effect_name: str) -> MockHandler:
        """Create a specific mock handler"""
        handlers = MockHandlerFactory.create_all()
        if effect_name not in handlers:
            raise ValueError(f"Unknown effect: {effect_name}")
        return handlers[effect_name]


# ============= Test Utilities =============

def setup_mock_handlers() -> Dict[str, MockHandler]:
    """
    Setup mock handlers for testing
    
    Returns:
        Dictionary of effect name -> mock handler
    
    Example:
        handlers = setup_mock_handlers()
        handlers['ConsentCheck'].default_result = ConsentStatus.GRANTED
        
        # Run your test code...
        
        # Verify effects were called
        assert len(handlers['ConsentCheck'].calls) > 0
    """
    return MockHandlerFactory.create_all()


def reset_all_handlers(handlers: Dict[str, MockHandler]) -> None:
    """Reset call history for all handlers"""
    for handler in handlers.values():
        handler.reset()